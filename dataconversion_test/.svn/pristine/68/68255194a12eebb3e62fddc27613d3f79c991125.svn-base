package com.haiziwang.commodity.task;

import com.haiziwang.commodity.common.Constant;
import com.haiziwang.commodity.mapper.ConversionSkuMapper;
import com.haiziwang.commodity.mapper.ConversionSkuPackInfoMapper;
import com.haiziwang.commodity.mapper.HzwSkuMapper;
import com.haiziwang.commodity.mapper.HzwSkuPackInfoMapper;
import com.haiziwang.commodity.model.po.*;
import com.haiziwang.commodity.strategy.table.CommonStrategyImpl;
import com.haiziwang.commodity.utils.PerformanceUtil;
import com.haiziwang.commodity.utils.SpringUtil;
import com.haiziwang.commodity.utils.TableUtil;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;

/**
 * 主要用来解决个别数据缺失以及不一直的问题(主要是sku)，只考虑中间表数据已存在的情况。
 * 文件中配置（skuId）
 */
@Component
public class PackInfoScheduledExecutor {

    protected final static Logger logger = LoggerFactory.getLogger(PackInfoScheduledExecutor.class);

    protected static ApplicationContext context = SpringUtil.getApplicationContext();

    private List<String> skuIds = new ArrayList<>();

    //是否执行过标识
    private static AtomicBoolean execFlag = new AtomicBoolean(false);

    public void executeJob() {
        //防止重复执行
        synchronized (SkuScheduledExecutor.class) {
            if (execFlag.get() == false) {
                execFlag.set(true);
            } else {
                logger.info("重复执行了..");
                return;
            }
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        InputStream inputStream = null;
        //是否开启定时任务
        if (1 == Constant.OPEN_SCHEDULE) {
            logger.info("PackInfoScheduledExecutor定时任务开始执行ThreadName[{}] DateTime[{}] ", Thread.currentThread().getName(), sdf.format(new Date()));
            skuIds.clear();
            //全表扫描
            if (1 == Constant.SCHEDULE_FULL_MODE) {
                getAllSkuIds();
            } else {
                inputStream = SkuScheduledExecutor.class.getClassLoader().getResourceAsStream("file/packinfo.txt");
                readFileByLinesV2(inputStream);
            }
        } else {
            return;
        }
        handlerPackInfo();
        logger.info("PackInfoScheduledExecutor定时任务执行结束ThreadName[{}] DateTime[{}] ", Thread.currentThread().getName(), sdf.format(new Date()));
    }

    private void getAllSkuIds() {
        ConversionSkuMapper conversionSkuMapper = context.getBean(ConversionSkuMapper.class);
        PerformanceUtil per = new PerformanceUtil();
        for (int i = 0; i < Constant.DB_SHARDING; i++) {
            PerformanceUtil performanceUtil = new PerformanceUtil();
            List<ConversionSkuPO> skus = conversionSkuMapper.selectAllSkuId(i);
            logger.info("获取t_sku_{}所有sku耗时：[{}]毫秒", i, performanceUtil.PERFORM_TIME());
            skuIds.addAll(skus.stream().map(e -> String.valueOf(e.getFskuid())).collect(Collectors.toList()));
        }
        logger.info("共获取[{}]个sku耗时：[{}]毫秒", skuIds.size(), per.PERFORM_TIME());
    }

    private void readFileByLinesV2(InputStream inputStream) {
//        File file = new File(fileName);
        BufferedReader reader = null;
        try {
            logger.info("开始读取文件流...");
            reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
            String tempString = null;
            int line = 1;
            // 一次读入一行，直到读入null为文件结束
            while ((tempString = reader.readLine()) != null) {
                // 显示行号
                logger.info("line " + line + ": " + tempString);
                //内容处理逻辑、
                String spuId = parseLine(tempString);
                if (StringUtils.isNotEmpty(spuId)) {
                    skuIds.add(spuId);
                }
                line++;
            }
            logger.info("line " + line + ": 读到最后一行结束！！！");
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e1) {
                }
            }
        }
    }

    private String parseLine(String line) {
        if (StringUtils.isEmpty(line)) {
            return null;
        }
        return line.trim();
    }

    private void handlerPackInfo() {
        HzwSkuMapper hzwSkuMapper = context.getBean(HzwSkuMapper.class);
        HzwSkuPackInfoMapper hzwPackInfoMapper = context.getBean(HzwSkuPackInfoMapper.class);
        ConversionSkuMapper conversionSkuMapper = context.getBean(ConversionSkuMapper.class);
        ConversionSkuPackInfoMapper conversionSkuPackInfoMapper = context.getBean(ConversionSkuPackInfoMapper.class);
        for (String skuIdStr : skuIds) {
            if (StringUtils.isNotEmpty(skuIdStr)) {
                Long skuId = null;
                if (StringUtils.isNotEmpty(skuIdStr)) {
                    skuId = Long.valueOf(skuIdStr);
                }
                if (skuId != null) {
                    HzwSkuPO existHzwSku = hzwSkuMapper.getSimpleSkuById(skuId);

                    if (existHzwSku != null) {
                        String spuId;
                        // 处理spuid
                        if (existHzwSku.getFspuid() == 0) {
                            spuId = CommonStrategyImpl.createSpuId(existHzwSku.getFskuid(), Constant.NEW_SPU_ID_PREFIX);
                        } else {
                            spuId = CommonStrategyImpl.createSpuId(existHzwSku.getFspuid(), Constant.SPU_ID_PREFIX);
                        }
                        int index = TableUtil.getTableIndex(spuId);

                        //校验中间表sku是否存在
                        ConversionSkuPO existCvsSku = conversionSkuMapper.selectBySkuId(index, skuId);
                        if (existCvsSku != null) {
                            if (skuId % 200 == 0) {
                                logger.info("处理sku[{}] packinfo信息", skuId);
                            }
                            //删除中间表所有packinfo
                            conversionSkuPackInfoMapper.deleteBySkuId(index, skuId);
                            //查询源表packinfo
                            List<HzwSkuPackInfoPO> hzwSkuPackInfoPOs = hzwPackInfoMapper.selectBySKuId(skuId);
                            if (hzwSkuPackInfoPOs != null && hzwSkuPackInfoPOs.size() > 0) {
                                for (HzwSkuPackInfoPO hzwSkuPackInfoPO : hzwSkuPackInfoPOs) {
                                    if (hzwSkuPackInfoPO != null) {
                                        ConversionSkuPackInfoPO packInfoPO = new ConversionSkuPackInfoPO();
                                        packInfoPO.setFspuid(spuId);
                                        packInfoPO.setFskuid(skuId);
                                        packInfoPO.setFpackindex(hzwSkuPackInfoPO.getFpackId());
                                        packInfoPO.setFbarcode(hzwSkuPackInfoPO.getFbarcode());
                                        packInfoPO.setFiswholepack(hzwSkuPackInfoPO.getFiswholepack());
                                        packInfoPO.setFpackrate(hzwSkuPackInfoPO.getFpackrate() == null ? null : hzwSkuPackInfoPO.getFpackrate().toString());
                                        packInfoPO.setFmeasureunit(hzwSkuPackInfoPO.getFmeasureunit());
                                        packInfoPO.setFaddtime(hzwSkuPackInfoPO.getFaddtime());
                                        packInfoPO.setFlastupdatetime(hzwSkuPackInfoPO.getFlastupdatetime());
                                        //取自源表sku上的字段
                                        if (hzwSkuPackInfoPO.getFpackId() == 1) {
                                            packInfoPO.setFskuweight(existHzwSku.getFskuweight());
                                            packInfoPO.setFskunetweight(existHzwSku.getFskunetweight());
                                            packInfoPO.setFskuvolume(existHzwSku.getFskuvolume().intValue());
                                            packInfoPO.setFskusizex(existHzwSku.getFskusizex());
                                            packInfoPO.setFskusizey(existHzwSku.getFskusizey());
                                            packInfoPO.setFskusizez(existHzwSku.getFskusizez());
                                        }
                                        conversionSkuPackInfoMapper.insertSelective(index, packInfoPO);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        skuIds.clear();
    }

}