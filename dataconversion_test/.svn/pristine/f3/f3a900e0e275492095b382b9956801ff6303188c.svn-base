package com.haiziwang.commodity.strategy.table;

import com.alibaba.otter.canal.protocol.CanalEntry;
import com.haiziwang.commodity.common.CanalRow;
import com.haiziwang.commodity.common.Constant;
import com.haiziwang.commodity.mapper.ConversionSkuMapper;
import com.haiziwang.commodity.mapper.ConversionSkuPackInfoMapper;
import com.haiziwang.commodity.mapper.HzwSkuMapper;
import com.haiziwang.commodity.model.po.ConversionSkuPO;
import com.haiziwang.commodity.model.po.ConversionSkuPackInfoPO;
import com.haiziwang.commodity.model.po.HzwSkuPO;
import com.haiziwang.commodity.model.po.HzwSkuPackInfoPO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;

public class PackInfoStrategyImpl extends CommonStrategyImpl implements TableStrategy {
    private static final Logger logger = LoggerFactory.getLogger(PackInfoStrategyImpl.class);

    @Override
    public int insert(CanalRow canalRow) {
        HzwSkuPackInfoPO packInfoPO = (HzwSkuPackInfoPO) getPOByCanalRow(canalRow, new HzwSkuPackInfoPO());
        try {
            handlerInsert(packInfoPO);
            logger.info("table[{}] event[{}] success PO[{}]", canalRow.getTableName(), canalRow.getEventType(), packInfoPO.toString());
        } catch (Exception e) {
            logger.error("table[{}] event[{}] error PO[{}]  exception：{}", canalRow.getTableName(), canalRow.getEventType(), packInfoPO.toString(), e.getMessage());
        }

        return 0;
    }


    @Override
    public int update(CanalRow canalRow) {
        // 获取关注的字段
        List<String> columns = getColumnsToChange(HzwSkuPackInfoPO.class);
        // 获取更新的字段
        Map<String, String> updatedColumnsMap = getUpdatedColumns(canalRow, columns);
        // 判断是否需要进行字段转换
        if (!canalRow.getNeedChange())
            return 0;

        HzwSkuPackInfoPO packInfoPO = (HzwSkuPackInfoPO) getPOByCanalRow(canalRow, new HzwSkuPackInfoPO());
        Long skuId = packInfoPO.getFskuid();
        HzwSkuMapper hzwSkuMapper = context.getBean(HzwSkuMapper.class);
        HzwSkuPO hzwSkuPO = hzwSkuMapper.getSkuById(skuId);
        String spuId = "";
        if (hzwSkuPO.getFspuid() == 0) {
            spuId = createSpuId(skuId, Constant.NEW_SPU_ID_PREFIX);
        } else {
            spuId = createSpuId(hzwSkuPO.getFspuid(), Constant.SPU_ID_PREFIX);
        }
        Integer index = getTableIndex(spuId);
        // 查询中间库是否存在pack_info
        ConversionSkuPackInfoMapper conversionSkuPackInfoMapper = context.getBean(ConversionSkuPackInfoMapper.class);
        ConversionSkuPackInfoPO conversionSkuPackInfo = conversionSkuPackInfoMapper.selectBySpuIdAndSkuId(index, spuId, skuId, packInfoPO.getFpackId());
        try {
            if (conversionSkuPackInfo != null) {
                //更新
//            handlerSpuUpdate(spuPO, updatedColumnsMap, index, exsitSpuPO.getFid());
                handlerUpdate(packInfoPO, updatedColumnsMap, index, spuId, skuId, conversionSkuPackInfo.getFid());
            } else {
                //新增
                handlerInsert(packInfoPO);
            }
            logger.info("table[{}] event[{}] success PO[{}]", canalRow.getTableName(), canalRow.getEventType(), packInfoPO.toString());
        } catch (Exception e) {
            logger.error("table[{}] event[{}] error PO[{}]  exception：{}", canalRow.getTableName(), canalRow.getEventType(), packInfoPO.toString(), e.getMessage());
        }

        return 1;
    }

    @Override
    public int delete(CanalRow canalRow) {
        HzwSkuPackInfoPO packInfoPO = (HzwSkuPackInfoPO) getPOByCanalRow(canalRow, new HzwSkuPackInfoPO());
        Long skuId = packInfoPO.getFskuid();
        HzwSkuMapper hzwSkuMapper = context.getBean(HzwSkuMapper.class);
        HzwSkuPO hzwSkuPO = hzwSkuMapper.getSkuById(skuId);
        String spuId = "";
        if (hzwSkuPO.getFspuid() == 0) {
            spuId = createSpuId(skuId, Constant.NEW_SPU_ID_PREFIX);
        } else {
            spuId = createSpuId(hzwSkuPO.getFspuid(), Constant.SPU_ID_PREFIX);
        }
        Integer index = getTableIndex(spuId);
        try {
            handlerDelete(index, packInfoPO, spuId);
            logger.info("table[{}] event[{}] success PO[{}]", canalRow.getTableName(), canalRow.getEventType(), packInfoPO.toString());
        } catch (Exception e) {
            logger.error("table[{}] event[{}] error PO[{}]  exception：{}", canalRow.getTableName(), canalRow.getEventType(), packInfoPO.toString(), e.getMessage());
        }

        return 0;
    }

    @Override
    public int execute(CanalRow canalRow) {
        int recordNum = 0;
        if (canalRow.getEventType() == CanalEntry.EventType.INSERT) {
            recordNum = insert(canalRow);
        } else if (canalRow.getEventType() == CanalEntry.EventType.UPDATE) {
            recordNum = update(canalRow);
        } else if (canalRow.getEventType() == CanalEntry.EventType.DELETE) {
            recordNum = delete(canalRow);
        }
        return recordNum;
    }

    private void handlerDelete(Integer index, HzwSkuPackInfoPO packInfoPO, String spuId) {
        ConversionSkuPackInfoMapper conversionSkuPackInfoMapper = context.getBean(ConversionSkuPackInfoMapper.class);
        conversionSkuPackInfoMapper.deleteByFskuid(index, spuId, packInfoPO.getFskuid(), packInfoPO.getFpackId());
    }


    private void handlerInsert(HzwSkuPackInfoPO packInfoPO) {
        String spuId = "";
        ConversionSkuPackInfoPO conversionSkuPackInfoPO = new ConversionSkuPackInfoPO();
        Long skuId = packInfoPO.getFskuid();
        // 检查是否存在
        HzwSkuMapper hzwSkuMapper = context.getBean(HzwSkuMapper.class);
        HzwSkuPO hzwSkuPO = hzwSkuMapper.getSkuById(skuId);
        if (hzwSkuPO != null) {
            if (hzwSkuPO.getFspuid() == 0) {
                spuId = createSpuId(skuId, Constant.NEW_SPU_ID_PREFIX);
            } else {
                spuId = createSpuId(hzwSkuPO.getFspuid(), Constant.SPU_ID_PREFIX);
            }
            int index = getTableIndex(spuId);
            ConversionSkuMapper conversionSkuMapper = context.getBean(ConversionSkuMapper.class);
            ConversionSkuPO conversionSkuPO = conversionSkuMapper.selectBySkuId(index, skuId);
            if (conversionSkuPO != null) {
                conversionSkuPackInfoPO.setFspuid(spuId);
                conversionSkuPackInfoPO.setFskuid(skuId);
                conversionSkuPackInfoPO.setFpackindex(packInfoPO.getFpackId());
                conversionSkuPackInfoPO.setFbarcode(packInfoPO.getFbarcode());
                conversionSkuPackInfoPO.setFiswholepack(packInfoPO.getFiswholepack());
                conversionSkuPackInfoPO.setFpackrate(packInfoPO.getFpackrate() == null ? null : packInfoPO.getFpackrate().toString());
                conversionSkuPackInfoPO.setFmeasureunit(packInfoPO.getFmeasureunit());
                conversionSkuPackInfoPO.setFaddtime(packInfoPO.getFaddtime());
                conversionSkuPackInfoPO.setFlastupdatetime(packInfoPO.getFlastupdatetime());
                conversionSkuPackInfoPO.setFplatformid(1);
                ConversionSkuPackInfoMapper conversionSkuPackInfoMapper = context.getBean(ConversionSkuPackInfoMapper.class);
                conversionSkuPackInfoMapper.insertSelective(index, conversionSkuPackInfoPO);
            }
        }
    }

    private void handlerUpdate(HzwSkuPackInfoPO packInfoPO, Map<String, String> updatedColumnsMap, int index, String spuId, Long skuId, Long packFid) {
        ConversionSkuPackInfoPO conversionSkuPackInfoPO = new ConversionSkuPackInfoPO();

        if (packInfoPO == null) {
            return;
        }
        for (Map.Entry entry : updatedColumnsMap.entrySet()) {
            String columnName = (String) entry.getKey();
            switch (columnName) {
                case "Fbarcode":
                    conversionSkuPackInfoPO.setFbarcode(packInfoPO.getFbarcode());
                    break;
                case "Fmeasureunit":
                    conversionSkuPackInfoPO.setFmeasureunit(packInfoPO.getFmeasureunit());
                    break;
                case "Fpackrate":
                    conversionSkuPackInfoPO.setFpackrate(packInfoPO.getFpackrate() == null ? null : packInfoPO.getFpackrate().toString());
                    break;
                case "Fiswholepack":
                    conversionSkuPackInfoPO.setFiswholepack(packInfoPO.getFiswholepack());
                    break;
                case "Faddtime":
                    conversionSkuPackInfoPO.setFaddtime(packInfoPO.getFaddtime());
                    break;
                case "Flastupdatetime":
                    conversionSkuPackInfoPO.setFlastupdatetime(packInfoPO.getFlastupdatetime());
                    break;
                default:
                    logger.info("没有处理的字段 [{}]", columnName);
            }
        }
        ConversionSkuPackInfoMapper conversionSkuPackInfoMapper = context.getBean(ConversionSkuPackInfoMapper.class);
        conversionSkuPackInfoPO.setFid(packFid);
        conversionSkuPackInfoMapper.updateByPrimaryKeySelective(index, conversionSkuPackInfoPO);
    }
}