package com.haiziwang.commodity.strategy.table;

import com.alibaba.otter.canal.protocol.CanalEntry;
import com.haiziwang.commodity.common.CanalRow;
import com.haiziwang.commodity.common.Constant;
import com.haiziwang.commodity.mapper.*;
import com.haiziwang.commodity.model.dto.SkuUpdateFlagDTO;
import com.haiziwang.commodity.model.po.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class SkuErpStrategyImpl extends CommonStrategyImpl implements TableStrategy {

    private static final Logger logger = LoggerFactory.getLogger(SkuErpStrategyImpl.class);

    private static Map<String, Set<String>> conversionRelation = new HashMap<String, Set<String>>() {
        {
            put("sku", new HashSet<String>() {
                {
                    add("Fgrossmargin");
                    add("Fgoodsno");
                    add("Flevel");

                }
            });
            put("spu", new HashSet<String>() {
                {
                    add("Fskutitle");
                    add("Fbrandid");
                    add("Fskuvatrate");
                    add("Fskupurchtaxrate");

                }
            });
        }
    };

    @Override
    public int insert(CanalRow canalRow) {
        return 0;
    }

    @Override
    public int update(CanalRow canalRow) {
        // 获取关注的字段
        List<String> columns = getColumnsToChange(HzwSkuErpPO.class);
        // 获取更新的字段
        Map<String, String> updatedColumnsMap = getUpdatedColumns(canalRow, columns);
        // 判断是否需要进行字段转换
        if (!canalRow.getNeedChange())
            return 0;

        HzwSkuErpPO skuErpPO = (HzwSkuErpPO) getPOByCanalRow(canalRow, new HzwSkuErpPO());
        int index = 0;
        if (skuErpPO.getFspuid() == 0) {
            index = (int) (skuErpPO.getFskuid() % Constant.DB_SHARDING);
        } else {
            index = (int) (skuErpPO.getFspuid() % Constant.DB_SHARDING);
        }


        // 查询中间库是否存在sku
        ConversionSkuMapper conversionSkuMapper = context.getBean(ConversionSkuMapper.class);

        ConversionSkuPO conversionSkuPO = conversionSkuMapper.selectBySkuId(index, skuErpPO.getFskuid());


        try {
            if (conversionSkuPO != null) {
                //更新
                handlerSkuUpdate(skuErpPO, updatedColumnsMap, index, conversionSkuPO.getFid(), conversionSkuPO.getFspuid());
            } else {
                //新增
//            handlerSkuInsert(skuPO);
            }
            logger.info("table[{}] event[{}] success PO[{}]", canalRow.getTableName(), canalRow.getEventType(), skuErpPO.toString());
        } catch (Exception e) {
            logger.error("table[{}] event[{}] error PO[{}]  exception：{}", canalRow.getTableName(), canalRow.getEventType(), skuErpPO.toString(), e.toString());
        }
        return 1;

    }

    @Override
    public int delete(CanalRow canalRow) {
        return 0;
    }

    @Override
    public int execute(CanalRow canalRow) {
        int recordNum = 0;
        if (canalRow.getEventType() == CanalEntry.EventType.INSERT) {
            recordNum = insert(canalRow);
        } else if (canalRow.getEventType() == CanalEntry.EventType.UPDATE) {
            recordNum = update(canalRow);
        } else if (canalRow.getEventType() == CanalEntry.EventType.DELETE) {
            recordNum = delete(canalRow);
        }
        return recordNum;
    }

    private void handlerSkuUpdate(HzwSkuErpPO skuErpPO, Map<String, String> updatedColumnsMap, int index, Long skuFid, String spuId) {
        SkuUpdateFlagDTO skuUpdateFlagDTO = new SkuUpdateFlagDTO();
        ConversionSpuPO conversionSpuPO = new ConversionSpuPO();
        ConversionSkuPO conversionSkuPO = new ConversionSkuPO();
        for (Map.Entry entry : updatedColumnsMap.entrySet()) {
            String columnName = (String) entry.getKey();
//            String columnvValue = (String) entry.getValue();
            switch (columnName) {
                case "Fgrossmargin":
                    skuUpdateFlagDTO.check(columnName, conversionRelation);
                    conversionSkuPO.setFgrossmargin(skuErpPO.getFgrossmargin());
                    break;
                case "Fgoodsno":
                    skuUpdateFlagDTO.check(columnName, conversionRelation);
                    conversionSkuPO.setFgoodsno(skuErpPO.getFgoodsno());
                    break;
                case "Flevel":
                    skuUpdateFlagDTO.check(columnName, conversionRelation);
                    conversionSkuPO.setFskulevel(skuErpPO.getFlevel());
                    break;

                case "Fskutitle":
                    skuUpdateFlagDTO.check(columnName, conversionRelation);
                    conversionSpuPO.setFsputitle(skuErpPO.getFskutitle());
                    break;
                case "Fbrandid":
                    skuUpdateFlagDTO.check(columnName, conversionRelation);
                    conversionSpuPO.setFerpbrandid(skuErpPO.getFbrandid());
                    break;
                case "Fskuvatrate":
                    skuUpdateFlagDTO.check(columnName, conversionRelation);
                    conversionSpuPO.setFspuvatrate(skuErpPO.getFskuvatrate());
                    break;
                case "Fskupurchtaxrate":
                    skuUpdateFlagDTO.check(columnName, conversionRelation);
                    conversionSpuPO.setFspupurchtaxrate(skuErpPO.getFskupurchtaxrate());
                    break;

                default:
                    logger.info("没有处理的字段 [{}]", columnName);
            }
        }
        if (skuUpdateFlagDTO.getUpdateSku()) {
            ConversionSkuMapper conversionSkuMapper = context.getBean(ConversionSkuMapper.class);
            conversionSkuPO.setFid(skuFid);
            conversionSkuMapper.updateByPrimaryKeySelective(index, conversionSkuPO);
        }
        if (skuUpdateFlagDTO.getUpdateSpu()) {
            ConversionSpuMapper conversionSpuMapper = context.getBean(ConversionSpuMapper.class);
            ConversionSpuPO existConversionSpuPO = conversionSpuMapper.selectBySpuId(index, spuId, 3L);
            if (existConversionSpuPO != null) {
                conversionSpuPO.setFid(existConversionSpuPO.getFid());
                conversionSpuMapper.updateByPrimaryKeySelective(index, conversionSpuPO);
            }
        }


    }


}