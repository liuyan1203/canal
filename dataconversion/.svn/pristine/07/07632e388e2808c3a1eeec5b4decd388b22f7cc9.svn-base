package com.haiziwang.commodity.strategy.table;

import com.alibaba.otter.canal.protocol.CanalEntry;
import com.haiziwang.commodity.common.CanalRow;
import com.haiziwang.commodity.common.Constant;
import com.haiziwang.commodity.mapper.ConversionSpuMapper;
import com.haiziwang.commodity.model.dto.SkuUpdateFlagDTO;
import com.haiziwang.commodity.model.po.ConversionSkuPO;
import com.haiziwang.commodity.model.po.ConversionSpuPO;
import com.haiziwang.commodity.model.po.HzwSpuPO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class SpuStrategyImpl extends CommonStrategyImpl implements TableStrategy {
    private static final Logger logger = LoggerFactory.getLogger(SpuStrategyImpl.class);

    private static String SPU_ID_PREFIX = "sp";

    private static Map<String, Set<String>> conversionRelation = new HashMap<String, Set<String>>() {
        {
            put("sku", new HashSet<String>());
            put("spu", new HashSet<String>() {
                {
                    add("Fsputitle");
                    add("Fsputype");
                    add("Fspucategoryattr");
                    add("Fspuspecmodel");
                    add("Faddtime");
                    add("Flastupdatetime");
                }
            });
        }
    };

    @Override
    public int insert(CanalRow canalRow) {
        return 0;
    }

    @Override
    public int update(CanalRow canalRow) {
        // 获取关注的字段
        List<String> columns = getColumnsToChange(HzwSpuPO.class);
        // 获取更新的字段
        Map<String, String> updatedColumnsMap = getUpdatedColumns(canalRow, columns);
        // 判断是否需要进行字段转换
        if (!canalRow.getNeedChange())
            return 0;

        HzwSpuPO spuPO = (HzwSpuPO) getPOByCanalRow(canalRow, new HzwSpuPO());
        String spuId = createSpuId(spuPO.getFspuid(), SPU_ID_PREFIX);
        int index = (int) (spuPO.getFspuid() % Constant.DB_SHARDING);

        // 查询中间库是否存在spu
        ConversionSpuMapper conversionSpuMapper = context.getBean(ConversionSpuMapper.class);
        ConversionSpuPO exsitSpuPO = conversionSpuMapper.selectBySpuId(index, spuId, spuPO.getFcooperatorid());
        try {
            if (exsitSpuPO != null) {
                //更新
                handlerSpuUpdate(spuPO, updatedColumnsMap, index, exsitSpuPO.getFid());
            } else {
                //新增暂不处理
            }
            logger.info("table[{}] event[{}] success PO[{}]", canalRow.getTableName(), canalRow.getEventType(), spuPO.toString());
        } catch (Exception e) {
            logger.error("table[{}] event[{}] error PO[{}]  exception：{}", canalRow.getTableName(), canalRow.getEventType(), spuPO.toString(), e.toString());
        }
        return 1;
    }

    @Override
    public int delete(CanalRow canalRow) {
        return 0;
    }

    @Override
    public int execute(CanalRow canalRow) {
        int recordNum = 0;
        if (canalRow.getEventType() == CanalEntry.EventType.INSERT) {
            recordNum = insert(canalRow);
        } else if (canalRow.getEventType() == CanalEntry.EventType.UPDATE) {
            recordNum = update(canalRow);
        } else if (canalRow.getEventType() == CanalEntry.EventType.DELETE) {
            recordNum = delete(canalRow);
        }
        return recordNum;
    }

    private void handlerSpuUpdate(HzwSpuPO spuPO, Map<String, String> updatedColumnsMap, int index, Long spuFid) {
        ConversionSpuPO conversionSpuPO = new ConversionSpuPO();
        for (Map.Entry entry : updatedColumnsMap.entrySet()) {
            String columnName = (String) entry.getKey();
            switch (columnName) {
                case "Fsputitle":
                    conversionSpuPO.setFsputitle(spuPO.getFsputitle());
                    break;
                case "Fsputype":
                    conversionSpuPO.setFsputype(spuPO.getFsputype());
                    break;
                case "Fspucategoryattr":
                    conversionSpuPO.setFspucategoryattr(spuPO.getFspucategoryattr());
                    break;
                case "Fspuspecmodel":
                    conversionSpuPO.setFspuspecmodel(spuPO.getFspuspecmodel());
                    break;
                case "Faddtime":
                    conversionSpuPO.setFspuaddtime(spuPO.getFaddtime());
                    break;
                case "Flastupdatetime":
                    conversionSpuPO.setFspuaddtime(spuPO.getFaddtime());
                    break;
                default:
                    logger.info("没有处理的字段 [{}]", columnName);
            }
        }
        ConversionSpuMapper conversionSpuMapper = context.getBean(ConversionSpuMapper.class);
        conversionSpuPO.setFid(spuFid);
        conversionSpuMapper.updateByPrimaryKeySelective(index, conversionSpuPO);
    }

}