package com.haiziwang.commodity.canal;

import com.alibaba.otter.canal.client.CanalConnector;
import com.alibaba.otter.canal.protocol.CanalEntry;
import com.alibaba.otter.canal.protocol.CanalEntry.*;
import com.alibaba.otter.canal.protocol.Message;
import com.haiziwang.commodity.common.CanalRow;
import com.haiziwang.commodity.common.Constant;
import com.haiziwang.commodity.strategy.table.CommonStrategyImpl;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.SystemUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.CollectionUtils;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ArrayBlockingQueue;

public class BaseCanalClient {

    protected final static Logger logger = LoggerFactory.getLogger(AbstractCanalClient.class);
    protected static final String SEP = SystemUtils.LINE_SEPARATOR;
    protected static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    protected volatile boolean running = false;
    protected Thread.UncaughtExceptionHandler handler = new Thread.UncaughtExceptionHandler() {

        public void uncaughtException(Thread t, Throwable e) {
            logger.error("parse events has an error", e);
        }
    };
    protected Thread thread = null;
    protected CanalConnector connector;
    protected static String context_format = null;
    protected static String row_format = null;
    protected static String transaction_format = null;
    protected String destination;

    private static List<String> tables = new ArrayList<String>(){
        {
            add("t_sku");
            add("t_spu");
            add("t_sku_erp");
            add("t_spu_erp");
            add("t_sku_area");
            add("t_sku_pack_info");
        }
    };

    protected static Vector<ArrayBlockingQueue<CanalRow>> queueList = null;


    static {
        context_format = SEP + "****************************************************" + SEP;
        context_format += "* Batch Id: [{}] ,count : [{}] , memsize : [{}] , Time : {}" + SEP;
        context_format += "* Start : [{}] " + SEP;
        context_format += "* End : [{}] " + SEP;
        context_format += "****************************************************" + SEP;

        row_format = SEP
                + "----------------> binlog[{}:{}] , name[{},{}] , eventType : {} , executeTime : {}({}) , gtid : ({}) , delay : {} ms"
                + SEP;

        transaction_format = SEP
                + "================> binlog[{}:{}] , executeTime : {}({}) , gtid : ({}) , delay : {}ms"
                + SEP;

    }

    public static Vector<ArrayBlockingQueue<CanalRow>> getQueueList() {
        return queueList;
    }

    public static void setQueueList(Vector<ArrayBlockingQueue<CanalRow>> queueList) {
        BaseCanalClient.queueList = queueList;
    }

    protected void printSummary(Message message, long batchId, int size) {
        long memsize = 0;
        for (Entry entry : message.getEntries()) {
            memsize += entry.getHeader().getEventLength();
        }

        String startPosition = null;
        String endPosition = null;
        if (!CollectionUtils.isEmpty(message.getEntries())) {
            startPosition = buildPositionForDump(message.getEntries().get(0));
            endPosition = buildPositionForDump(message.getEntries().get(message.getEntries().size() - 1));
        }

        SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);
        logger.info(context_format, new Object[]{batchId, size, memsize, format.format(new Date()), startPosition,
                endPosition});
    }

    protected String buildPositionForDump(Entry entry) {
        long time = entry.getHeader().getExecuteTime();
        Date date = new Date(time);
        SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);
        String position = entry.getHeader().getLogfileName() + ":" + entry.getHeader().getLogfileOffset() + ":"
                + entry.getHeader().getExecuteTime() + "(" + format.format(date) + ")";
        if (StringUtils.isNotEmpty(entry.getHeader().getGtid())) {
            position += " gtid(" + entry.getHeader().getGtid() + ")";
        }
        return position;
    }

    protected void printEntry(List<Entry> entrys) {
        boolean bKeyLog = false;
        for (Entry entry : entrys) {
            long executeTime = entry.getHeader().getExecuteTime();
            long delayTime = new Date().getTime() - executeTime;
            Date date = new Date(entry.getHeader().getExecuteTime());
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            if (entry.getEntryType() == EntryType.ROWDATA) {
                RowChange rowChage = null;
                try {
                    rowChage = RowChange.parseFrom(entry.getStoreValue());
                } catch (Exception e) {
                    throw new RuntimeException("parse event has an error , data:" + entry.toString(), e);
                }
                //获取事件类型
                EventType eventType = rowChage.getEventType();
                if (bKeyLog) {
                    logger.info(row_format,
                            new Object[]{entry.getHeader().getLogfileName(),
                                    String.valueOf(entry.getHeader().getLogfileOffset()), entry.getHeader().getSchemaName(),
                                    entry.getHeader().getTableName(), eventType,
                                    String.valueOf(entry.getHeader().getExecuteTime()), simpleDateFormat.format(date),
                                    entry.getHeader().getGtid(), String.valueOf(delayTime)});
                    bKeyLog = false;
                }

                if (eventType == EventType.QUERY || rowChage.getIsDdl()) {
                    logger.info(" 过滤 QUERY & DDL sql ----> " + rowChage.getSql() + SEP);
                    continue;
                }

                printXAInfo(rowChage.getPropsList());
                String tabelName = entry.getHeader().getTableName();

                //过滤不关心的表
                if (tables.contains(tabelName)) {
                    logger.info("table[{}] 有了新的变更，eventType[{}] ", tabelName, eventType);
                    for (RowData rowData : rowChage.getRowDatasList()) {
                        CanalRow canalRow = new CanalRow();
                        canalRow.setEventType(eventType);
                        canalRow.setTableName(entry.getHeader().getTableName());

                        List<CanalEntry.Column> columnList = null;
                        if (eventType == EventType.DELETE) {
                            columnList = rowData.getBeforeColumnsList();
                        } else {
                            columnList = rowData.getAfterColumnsList();
                        }
                        canalRow.setColumns(columnList);

                        //放队列,按照spuid取模，没有skuid随机放入队列
                        Long spuId = findSpuId(columnList);
                        int idx = (int) (spuId % Constant.CLIENT_PROCESS_NUMBER);
                        ArrayBlockingQueue<CanalRow> queue = this.queueList.get(idx);
                        if (queue != null) {
                            if (queue.size() < 20000) {
                                queue.add(canalRow);
                            } else {
                                try {
                                    Thread.sleep(500);
                                } catch (InterruptedException e) {
                                    logger.error("Catch InterruptedException, msg:{}", e.getMessage());
                                }
                            }
                        } else {
                            logger.error("skuId[{}] queue is null, queue size[{}]", spuId, this.queueList.size());
                            System.exit(-3);
                        }

                    }
                }else {
                    logger.info("table[{}] 有了新的变更， 暂不处理  eventType[{}] ", tabelName, eventType);
                }
            }
        }
    }

    protected void printColumn(List<Column> columns) {
        for (Column column : columns) {
            StringBuilder builder = new StringBuilder();
            try {
                if (StringUtils.containsIgnoreCase(column.getMysqlType(), "BLOB")
                        || StringUtils.containsIgnoreCase(column.getMysqlType(), "BINARY")) {
                    // get value bytes
                    builder.append(column.getName() + " : "
                            + new String(column.getValue().getBytes("ISO-8859-1"), "UTF-8"));
                } else {
                    builder.append(column.getName() + " : " + column.getValue());
                }
            } catch (UnsupportedEncodingException e) {
            }
            builder.append("    type=" + column.getMysqlType());
            if (column.getUpdated()) {
                builder.append("    update=" + column.getUpdated());
            }
            builder.append(SEP);
            logger.info(builder.toString());
        }
    }

    protected void printXAInfo(List<Pair> pairs) {
        if (pairs == null) {
            return;
        }

        String xaType = null;
        String xaXid = null;
        for (Pair pair : pairs) {
            String key = pair.getKey();
            if (StringUtils.endsWithIgnoreCase(key, "XA_TYPE")) {
                xaType = pair.getValue();
            } else if (StringUtils.endsWithIgnoreCase(key, "XA_XID")) {
                xaXid = pair.getValue();
            }
        }

        if (xaType != null && xaXid != null) {
            logger.info(" ------> " + xaType + " " + xaXid);
        }
    }

    public void setConnector(CanalConnector connector) {
        this.connector = connector;
    }

    /**
     * 获取当前Entry的 GTID信息示例
     *
     * @param header
     * @return
     */
    public static String getCurrentGtid(CanalEntry.Header header) {
        List<Pair> props = header.getPropsList();
        if (props != null && props.size() > 0) {
            for (Pair pair : props) {
                if ("curtGtid".equals(pair.getKey())) {
                    return pair.getValue();
                }
            }
        }
        return "";
    }

    /**
     * 获取当前Entry的 GTID Sequence No信息示例
     *
     * @param header
     * @return
     */
    public static String getCurrentGtidSn(CanalEntry.Header header) {
        List<Pair> props = header.getPropsList();
        if (props != null && props.size() > 0) {
            for (Pair pair : props) {
                if ("curtGtidSn".equals(pair.getKey())) {
                    return pair.getValue();
                }
            }
        }
        return "";
    }

    /**
     * 获取当前Entry的 GTID Last Committed信息示例
     *
     * @param header
     * @return
     */
    public static String getCurrentGtidLct(CanalEntry.Header header) {
        List<Pair> props = header.getPropsList();
        if (props != null && props.size() > 0) {
            for (Pair pair : props) {
                if ("curtGtidLct".equals(pair.getKey())) {
                    return pair.getValue();
                }
            }
        }
        return "";
    }

    private Long findSpuId(List<CanalEntry.Column> columns) {
        Long spuId = null;
        Long skuId = null;
        try {
            for (CanalEntry.Column column : columns) {
                if ("Fskuid".equals(column.getName())) {
                    if (column.getValue() != null) {
                        skuId = Long.valueOf(column.getValue());
                    }
                }
                if ("Fspuid".equals(column.getName())) {
                    if (column.getValue() != null) {
                        spuId = Long.valueOf(column.getValue());
                    }
                }
                if (spuId != null && skuId != null){
                    break;
                }
            }
            if (spuId != null && spuId != 0){
                return spuId;
            }else if(skuId != null){
                return skuId;
            }else {
                return 0L;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0L;
    }

}
