package com.haiziwang.commodity.task;

import com.haiziwang.commodity.common.Constant;
import com.haiziwang.commodity.mapper.ConversionSkuAreaMapper;
import com.haiziwang.commodity.mapper.ConversionSkuMapper;
import com.haiziwang.commodity.mapper.HzwSkuAreaMapper;
import com.haiziwang.commodity.mapper.HzwSkuMapper;
import com.haiziwang.commodity.model.po.ConversionSkuAreaPO;
import com.haiziwang.commodity.model.po.ConversionSkuPO;
import com.haiziwang.commodity.model.po.HzwSkuAreaPO;
import com.haiziwang.commodity.model.po.HzwSkuPO;
import com.haiziwang.commodity.strategy.table.CommonStrategyImpl;
import com.haiziwang.commodity.utils.SpringUtil;
import com.haiziwang.commodity.utils.TableUtil;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;

/**
 * 主要用来解决area表数据不一致情况
 * 文件中配置（skuId,areaId）
 */
@Component
public class AreaScheduledExecutor {

    protected final static Logger logger = LoggerFactory.getLogger(AreaScheduledExecutor.class);

    protected static ApplicationContext context = SpringUtil.getApplicationContext();

    private List<String> skuIds = new ArrayList<>();

    //是否执行过标识
    private static AtomicBoolean execFlag = new AtomicBoolean(false);

    public void executeJob() {
        //防止重复执行
        synchronized (AreaScheduledExecutor.class) {
            if (execFlag.get() == false) {
                execFlag.set(true);
            } else {
                logger.info("重复执行了..");
                return;
            }
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        InputStream inputStream = null;
        //是否开启定时任务
        if (1 == Constant.OPEN_SCHEDULE) {
            logger.info("AreaScheduledExecutor定时任务开始执行ThreadName[{}] DateTime[{}] ", Thread.currentThread().getName(), sdf.format(new Date()));
            skuIds.clear();
            inputStream = AreaScheduledExecutor.class.getClassLoader().getResourceAsStream("file/area.txt");
        } else {
            return;
        }
        readFileByLinesV2(inputStream);
        sync();
        logger.info("AreaScheduledExecutor定时任务执行结束ThreadName[{}] DateTime[{}] ", Thread.currentThread().getName(), sdf.format(new Date()));
    }

    public List<String> readFileByLinesV2(InputStream inputStream) {
        List<String> pushSpus = new ArrayList<>();
        BufferedReader reader = null;
        try {
            logger.info("开始读取文件流...");
            reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
            String tempString = null;
            int line = 1;
            // 一次读入一行，直到读入null为文件结束
            while ((tempString = reader.readLine()) != null) {
                // 显示行号
                logger.info("line " + line + ": " + tempString);
                //内容处理逻辑、
                String skuIdAndAreaId = parseLine(tempString);
                if (StringUtils.isNotEmpty(skuIdAndAreaId)) {
                    skuIds.add(skuIdAndAreaId);
                }
                line++;
            }
            logger.info("line " + line + ": 读到最后一行结束！！！");
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e1) {
                }
            }
        }
        return pushSpus;
    }

    private String parseLine(String line) {
        if (StringUtils.isEmpty(line)) {
            return null;
        }
        return line.trim();
    }

    private void sync() {
        int countInster = 0;
        int countUpdate = 0;
        HzwSkuMapper hzwSkuMapper = context.getBean(HzwSkuMapper.class);
        ConversionSkuMapper conversionSkuMapper = context.getBean(ConversionSkuMapper.class);
        HzwSkuAreaMapper hzwSkuAreaMapper = context.getBean(HzwSkuAreaMapper.class);
        ConversionSkuAreaMapper conversionSkuAreaMapper = context.getBean(ConversionSkuAreaMapper.class);
        CommonStrategyImpl commonStrategy = new CommonStrategyImpl();
        for (String skuIdAndAreaId : skuIds) {
            try {
                if (StringUtils.isNotEmpty(skuIdAndAreaId)) {
                    String[] arr = skuIdAndAreaId.split(",");
                    Long skuId = null;
                    Long areaId = null;
                    //只有skuId
                    if (arr.length == 1) {
                        skuId = Long.valueOf(arr[0]);
                    } else if (arr.length == 2) {
                        skuId = Long.valueOf(arr[0]);
                        areaId = Long.valueOf(arr[1]);
                    }
                    if (skuId != null) {
                        List<Long> areaLsit = new ArrayList<>();
                        if (areaId != null) {
                            areaLsit.add(areaId);
                        } else {
                            List<HzwSkuAreaPO> hzwSkuAreaPOList = hzwSkuAreaMapper.selectBySkuid(skuId);
                            areaLsit = hzwSkuAreaPOList.stream().map(HzwSkuAreaPO::getFskuareaid).collect(Collectors.toList());
                        }
                        for (Long skuAreaId : areaLsit) {
                            String spuId;
                            HzwSkuPO hzwSkuPO = hzwSkuMapper.getSpuIdById(skuId);
                            if (hzwSkuPO != null) {
                                if (hzwSkuPO.getFspuid() == 0) {
                                    spuId = commonStrategy.createSpuId(skuId, Constant.NEW_SPU_ID_PREFIX);
                                } else {
                                    spuId = commonStrategy.createSpuId(hzwSkuPO.getFspuid(), Constant.SPU_ID_PREFIX);
                                }
                                int skuIndex = TableUtil.getTableIndex(spuId);
                                int areaIndex = TableUtil.getTableAreaIndex(spuId);

                                //获取源表area
                                HzwSkuAreaPO areaPO = hzwSkuAreaMapper.selectByPrimaryKey(skuAreaId);
                                if (areaPO != null) {
                                    ConversionSkuAreaPO conversionSkuAreaPO = conversionSkuAreaMapper.selectBySpuIdAndSkuId(areaIndex, spuId, skuId, areaPO.getFentityid());

                                    ConversionSkuAreaPO newCvsArea = new ConversionSkuAreaPO();
                                    newCvsArea.setFplatformid(1);
                                    newCvsArea.setFspuid(spuId);
                                    newCvsArea.setFskuid(skuId);
                                    newCvsArea.setFentityid(areaPO.getFentityid());
                                    newCvsArea.setFchannelid(areaPO.getFchannelid());
                                    newCvsArea.setFstoreid(areaPO.getFstoreid());
                                    newCvsArea.setFworkstatecode(areaPO.getFworkstatecode());
                                    newCvsArea.setFcirculationmodecode(areaPO.getFcirculationmodecode());
                                    newCvsArea.setFskuareapostprice(areaPO.getFskuareapostprice());
                                    newCvsArea.setFskuareaprice(areaPO.getFskuareaprice());
                                    newCvsArea.setFskuareapreprice(areaPO.getFskuareapreprice());
                                    newCvsArea.setFsaleslabelid(areaPO.getFsaleslabelid());
                                    newCvsArea = handlerSpecialColumn(newCvsArea, areaPO);
                                    newCvsArea.setFskuareaproperty(areaPO.getFskuareaproperty());
                                    newCvsArea.setFskuareabuyer(areaPO.getFskuareabuyer());
                                    newCvsArea.setFskuareaaddtime(areaPO.getFskuareaaddtime());
                                    newCvsArea.setFskuarealastupdatetime(areaPO.getFskuarealastupdatetime());
                                    newCvsArea.setFskuareafirstpublishtime(areaPO.getFskuareafirstpublishtime());
                                    //中间表不存在就新增
                                    if (conversionSkuAreaPO == null) {
                                        ConversionSkuPO conversionSkuPO = conversionSkuMapper.selectBySkuId(skuIndex, skuId);
                                        //赋值给sku
                                        if (areaPO.getFentityid() == 8000 && areaPO.getFchannelid() == 1) {
                                            conversionSkuPO.setFskuminbuycount(areaPO.getFskuareaminbuycount());
                                            conversionSkuPO.setFskumaxbuycount(areaPO.getFskuareamaxbuycount());
                                            conversionSkuPO.setFskubuymultiple(areaPO.getFskuareabuymultiple());
                                            conversionSkuMapper.updateByPrimaryKeySelective(skuIndex, conversionSkuPO);
                                        }
                                        conversionSkuAreaMapper.insertSelective(areaIndex, newCvsArea);
                                        countInster++;
                                        logger.info("area 新增成功 count[{}] skuId[{}] areaId[{}]", countInster, skuId, skuAreaId);
                                    } else { //中间表存在就update
                                        newCvsArea.setFid(conversionSkuAreaPO.getFid());
                                        conversionSkuAreaMapper.updateByPrimaryKeySelective(areaIndex, newCvsArea);
                                        countUpdate++;
                                        logger.info("area 更新成功 count[{}] skuId[{}] areaId", countUpdate, skuId, skuAreaId);
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (Exception e) {
                logger.error("此条Area处理异常 skuId and areaId [{]] msg[{}]", skuIdAndAreaId, e.getMessage());
            }
        }
        logger.info("共处理area count[{}] 新增[{}] 更新[{}]", (countInster + countUpdate), countInster, countUpdate);
    }

    //对比新增：如果中间库已存在则continue

    private ConversionSkuAreaPO handlerSpecialColumn(ConversionSkuAreaPO conversionSkuAreaPO, HzwSkuAreaPO hzwSkuAreaPO) {
        if (conversionSkuAreaPO != null && hzwSkuAreaPO != null && hzwSkuAreaPO.getFskuareaproperty() != null) {
            Long skuareaproperty = hzwSkuAreaPO.getFskuareaproperty();
            StringBuffer sb = new StringBuffer();
            for (int i = 63; i >= 0; i--) {
                long bitVal = new Double(Math.pow(2, i)).longValue();
                if ((skuareaproperty & bitVal) == bitVal) {
                    if (i == 0 || i == 1) {
                        sb.append("0");
                    } else {
                        sb.append("1");
                    }
                } else {
                    sb.append("0");
                }
            }
            conversionSkuAreaPO.setFskuareaproperty(Long.parseLong(sb.toString(), 2));
        }

        return conversionSkuAreaPO;
    }

}